1. What is actor system
2. What problems it solved
3. Akka version which i am using 
4. What am i using for the http service
5. What am i using for the marshelling and un-marshelling 
   || spray json , circle , play json ||
    clinet sends data in the form of json -> converted into the respective case class which uses ??? and then it is sotred in the data base/ respective storage 
    when we return the data to the client using an api response, we generally convert this into json format This process is called as ???

6. How actors communicate with each other and what are the different communication methods 
 Actors will communicate with other using the messages.
Tell (!) Non blocking , dont wait for the response, fire and forgot.
What happens in detail after this 
Ask (?) blocking , waits for the responese, future[data], 
7. Actor life cycle 

                    +-------------------+
                    |                   |
          +--------->    preStart()     |
          |         |                   |
          |         +--------+----------+
          |                  |
          |                  v
     system.actorOf()    +--------+
                         |        |
                         | receive|
                         |        |
                         +---+----+
                             |
   Exception Thrown          |
         +                   v
         |             +-----------+
         |             | preRestart|
         |             +-----------+
         |                   |
         |             (old actor stopped)
         |                   |
         |             +-----------+
         |             |postRestart|
         |             +-----------+
         |                   |
         +------------------>  receive (again)
                             |
                        context.stop()
                             v
                       +-----------+
                       | postStop  |
                       +-----------+


Actor Created → Started → (Restarted) → Stopped

8. Akka architecture
9. Sending a message to itself.
10. Forwarding the messages. 
11. How to handle the actor failure 
   Actors failure can be handeled with the help of the supervison stratergy.4

The parent actor is always the supervisor of its children.
Whenever an actor creates another actor using context.actorOf(...), it becomes its supervisor automatically.
So, you do not need to create a separate supervisor actor — unless you want custom supervision logic for many actors in one place.
       override val supervisorStrategy = OneForOneStrategy() {
           case _: Exception => Restart
              }
12. What are the different strategies followed to handle the actor failure
ONE-FOR-ONE 
ALL-FOR-ONE
13. Actor hierarchy 
14. Actor's message box.

Actor – the behavior logic
Mailbox – holds pending messages
Dispatcher – picks messages from mailbox and sends them to actor
Thread pool / ExecutionContext – where message processing happens

 2. Each Actor Is Single-Threaded
Even though multiple actors share the dispatcher,

Each actor processes only one message at a time (thread-safe by design).

15. Dispatchers & different kinds of dispatches.
   What is the role of the dispatcher from picking up the message from the mail box .. explain its life cycle.
16. Routers and routes 
17. Different routing mechanisms and their use cases.
18. What are the different reasons for the failure of the actors?
19. What happens when the actors fail
    when an actor fails all the messages sent to the actor are send to the deadletters
    Then we need use the supervision mechanisms to
        Restart 
        Stop 
        Escalate 
        Resume 
actor will be done one of the above depending up on how we have handeled it.


20. What are dead letters?

All the messages send to the actor in case of termintaed, non existing , stopped.
How this got handeled are these messages get stored any where .. can it be reprocessed if they are important.
Think of deadLetters as a mailbox where Akka puts "undeliverable" messages.

21. different hooks in the actors
22. Supervision mechanisms 

every actor has the parent actor .. and that actor acts as the supervisior for the child actor 

One-for-One super vision stratergy : only the failed actor will be restarted or follow the respective mechanism 
All-for-One : if one of the child actor gets failed then all the child actors under the parent actor will gets applied with the mechanism.

import akka.actor._

class Worker extends Actor {
  def receive = {
    case "fail" => throw new RuntimeException("Boom!")
    case msg => println(s"Worker received: $msg")
  }

  override def preStart(): Unit = println("Worker started")
  override def postStop(): Unit = println("Worker stopped")
  override def preRestart(reason: Throwable, msg: Option[Any]): Unit =
    println(s"Worker restarting due to: ${reason.getMessage}")
  override def postRestart(reason: Throwable): Unit =
    println("Worker restarted")
}

class Supervisor extends Actor {
  val worker = context.actorOf(Props[Worker], "worker")

  override val supervisorStrategy = OneForOneStrategy() {
    case _: RuntimeException => Restart
  }

  def receive = {
    case msg => worker forward msg
  }
}

val system = ActorSystem("SupervisionExample")
val supervisor = system.actorOf(Props[Supervisor], "supervisor")

supervisor ! "Hello"
supervisor ! "fail"
supervisor ! "Hello again"

23. Building the repeated jobs with the help of akka.
24. Schedulers and different kinds of schedulers in akka.
25. What libraries you follow to write the rest apis in akka. 
26. Actor , ActorSystem , ActorReference.
27. Killing an actor what is the need of killing an actor and different ways of killing an actor .
28. Maintaing the state of an actor -> in general state of the actor gets lost when the actor gets restart
    we need to hanldle it seperately. So, what methods do we follow or need to maintain the state of an actor.
29. How to fine tune the slow performing actor?
30. Need to build a sample application which runs on the local host and accpepts the http requests.
31. become in akka .. how does it helps in changing the actors behaviour 
32. Stateful vs stateless actors .. are there any different kinds of actors are there?
33. Stopping the actor system .. do all the state of the application lost .. is there any way to persist the state of the actor system 
    can we use the 

